git init 				初始化一个git仓库
git add (file)			添加文件，可反复添加多个文件
git commit -m(message)		完成


git status				掌握工作区的状态
git diff				查看修改内容


git log				查看提交日志版本
git log --pretty=oneline	精简日志版本输出信息
git reset --hard HEAD~(100)	回退到前第100个版本
git reflog				查看过往版本信息


git checkout -- (file)		丢弃工作区的修改
git reset HEAD (file)		撤销暂存区的提交，再用git checkout -- (file)命令丢弃工作区的修改
git restore --staged (file)	与上条命令效果相同


rm (file)				删除工作区的文件
git rm (file)			删除工作区+暂存区的文件
git commit -m"remove file"	提交删除
git checkout -- file		用版本库里的版本替换工作区的版本
1.如果用rm删除文件，那就相当于只删除了工作区的文件，如果想要恢复，直接用git checkout -- <file>就可以
2.如果用git rm删除文件，那就相当于删除了文件，且将删除记录添加到了暂存区，如果想要恢复，需要先git reset HEAD <file>，然后再git checkout -- <file>
3.如果想彻底把版本库的删除掉，先git rm，再git commit 就ok了


git remote add origin git@github.com:(用户名)/(仓库名).git	关联一个远程库(关联一个远程库时必须给远程库指定一个名字，origin是默认习惯命名；)
git push -u origin master						关联后，第一次推送master分支的所有内容
git push origin master							只要有必要，就可以推送最新修改
git clone (仓库地址)							克隆一个仓库(Git支持多种协议，包括https，但ssh协议速度最快)


git branch							查看分支
git branch <name>						创建分支
git switch <name>或git checkout <name>		切换分支
git switch -c <name>或git checkout -b <name>	创建+切换分支
git merge <name>						合并某分支到当前分支
git branch -d <name>					删除分支




